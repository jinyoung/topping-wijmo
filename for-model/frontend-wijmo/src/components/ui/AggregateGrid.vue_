forEach: Aggregate
fileName: {{namePascalCase}}Grid.vue
path: frontend-wijmo/src/components/ui
---
<template>
    <div style="max-height:80vh;">
        <div class="gs-bundle-of-buttons" style="max-height:10vh;">
            {{#if (isSelectedSecurity options.rootModel.toppingPlatforms)}}
                <v-btn @click="addNewRow" small color="primary" :disabled="!hasRole.postActor">
                    <v-icon small>mdi-plus-circle-outline</v-icon>등록
                </v-btn>
                <v-btn  @click="editSelectedRow" small color="primary" :disabled="!hasRole.putActor">
                    <v-icon small>mdi-pencil</v-icon>수정
                </v-btn>
                <v-btn @click="deleteSelectedRows" small color="primary" :disabled="!hasRole.deleteActor">
                    <v-icon small>mdi-minus-circle-outline</v-icon>삭제
                </v-btn>
            {{else}}
                <v-btn @click="addNewRow" small color="primary">
                    <v-icon small>mdi-plus-circle-outline</v-icon>등록
                </v-btn>
                <v-btn  @click="editSelectedRow" small color="primary">
                    <v-icon small>mdi-pencil</v-icon>수정
                </v-btn>
                <v-btn @click="deleteSelectedRows" small color="primary">
                    <v-icon small>mdi-minus-circle-outline</v-icon>삭제
                </v-btn>
            {{/if}}
            <excel-export-button :exportService="this.exportService" :getFlex="getFlex" />
        </div>
        {{#contexts.views}}
        <{{namePascalCase}} @search="search"></{{namePascalCase}}>
        {{/contexts.views}}

        <!-- the grid -->
        <wj-flex-grid
            ref="flexGrid"
            :key="value.length"
            :autoGenerateColumns="false"
            :allowAddNew="false"
            :allowDelete="true"
            :allowPinning="'SingleColumn'"
            :newRowAtTop="false"
            :showMarquee="true"
            :selectionMode="'MultiRange'"
            :validateEdits="false"
            :itemsSource="value"
            :initialized="flexInitialized"
            :selectionChanged="onSelectionChanged"
            style="margin-top:10px; max-height:65vh;"
            class="wj-felx-grid"
        >
            <wj-flex-grid-filter :filterColumns="[RowHeader,{{#aggregateRoot.fieldDescriptors}}{{#if (isNotId nameCamelCase)}}'{{nameCamelCase}}',{{/if}}{{/aggregateRoot.fieldDescriptors}}]" />
            <wj-flex-grid-cell-template cellType="RowHeader" v-slot="cell">\{{cell.row.index + 1}}</wj-flex-grid-cell-template>
            {{#aggregateRoot.fieldDescriptors}}
            {{#if (isNotId nameCamelCase)}}
            {{#if isVO}}
            {{else}}
            <wj-flex-grid-column binding="{{nameCamelCase}}" header="{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}" width="2*" :isReadOnly="true" align="center" />
            {{/if}}
            {{/if}}
            {{/aggregateRoot.fieldDescriptors}}
            {{#outgoingRelations}}
            {{#target}}
            <wj-flex-grid-column binding="{{nameCamelCase}}Id" header="{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}" width="2*" :isReadOnly="true" align="center">
                <wj-flex-grid-cell-template cellType="Cell" v-slot="cell">   
                    <{{namePascalCase}}Id :editMode="false" v-model="cell.item.{{nameCamelCase}}Id"></{{namePascalCase}}Id>
                </wj-flex-grid-cell-template>
            </wj-flex-grid-column>
            {{/target}}
            {{/outgoingRelations}}
        </wj-flex-grid>
        {{#aggregateRoot.fieldDescriptors}}
        {{#if isList}}
        <{{namePascalCase}}DetailGrid offline v-if="selectedRow" v-model="selectedRow.{{nameCamelCase}}"/>
        {{/if}}
        {{/aggregateRoot.fieldDescriptors}}
        <v-col>
            <v-dialog
                v-model="openDialog"
                transition="dialog-bottom-transition"
                width="35%"
                class="add-edit-dialog"
            >
                <template>
                    <v-card>
                        <v-toolbar
                            color="primary"
                            class="elevation-0"
                            height="50px"
                        >
                            <div style="color:white; font-size:17px; font-weight:700;">{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}} 등록</div>
                            <v-spacer></v-spacer>
                            <v-icon
                                color="white"
                                small
                                @click="openDialog = false"
                            >mdi-close</v-icon>
                        </v-toolbar>
                        <v-card-text>
                            <{{namePascalCase}} :offline="offline"
                                :isNew="!itemToEdit"
                                :editMode="true"
                                v-model="itemToEdit"
                                @add="append"
                            />
                        </v-card-text>
                    </v-card>
                </template>
            </v-dialog>
        </v-col>
        <v-col style="margin-bottom:40px;">
            <div class="text-center">
                <v-dialog
                    width="332.5"
                    fullscreen
                    hide-overlay
                    transition="dialog-bottom-transition"
                >
                    <v-btn
                        style="position:absolute; top:2%; right:2%"
                        @click="closeDialog()"
                        depressed
                        icon 
                        absolute
                    >
                        <v-icon>mdi-close</v-icon>
                    </v-btn>
                </v-dialog>
            </div>
        </v-col>
    </div>
</template>

<script>
{{#contexts.views}}
import {{namePascalCase}} from '../{{namePascalCase}}.vue';
{{/contexts.views}}
import {{namePascalCase}} from '../{{namePascalCase}}.vue'
import BaseGrid from '../base-ui/BaseGrid'

export default {
    name: '{{nameCamelCase}}Grid',
    mixins:[BaseGrid],
    components:{
    {{#contexts.views}}
        {{namePascalCase}},
    {{/contexts.views}}
        {{namePascalCase}},
    },
    data: () => ({
        path: '{{namePlural}}',
        hasRole: {
            postActor: false,
            putActor: false,
            deleteActor: false
        },
    }),
    computed:{
        hasRole(){
            var obj = {
                postActor: this.userRoles.includes('{{contexts.actors.postActor.name}}'),
                putActor: this.userRoles.includes('{{contexts.actors.putActor.name}}'),
                deleteActor: this.userRoles.includes('{{contexts.actors.deleteActor.name}}')
            }
            return obj;
        }
    },
    methods:{
    }
}
</script>
<function>

var me = this;

if (me && me.attached) {
    var postCmd = me.attached.find(ele => ele._type.includes("Command") && (ele.controllerInfo.method=="POST" || ele.restRepositoryInfo.method=="POST"));
    var putCmd = me.attached.find(ele => ele._type.includes("Command") && (ele.controllerInfo.method=="PUT" || ele.restRepositoryInfo.method=="PUT"));
    var deleteCmd = me.attached.find(ele => ele._type.includes("Command") (ele.controllerInfo.method=="DELETE" || ele.restRepositoryInfo.method=="DELETE"));

    me.contexts.actors = {};

    if (postCmd && postCmd.attached) {
        var postActor = postCmd.attached.find(ele => ele._type.includes("Actor"));
        if (postActor) {
            me.contexts.actors.postActor = postActor;
        }
    }
    
    if (putCmd && putCmd.attached) {
        var putActor = putCmd.attached.find(ele => ele._type.includes("Actor"));
        if (putActor) {
            me.contexts.actors.putActor = putActor;
        }
    }
    
    if (deleteCmd && deleteCmd.attached) {
        var deleteActor = deleteCmd.attached.find(ele => ele._type.includes("Actor"));
        if (deleteActor) {
            me.contexts.actors.deleteActor = deleteActor;
        }
    }
}

window.$HandleBars.registerHelper('ifNotNull', function (displayName, name) {
    if(displayName){
        return displayName;
    }else{
        return name;
    }
})

window.$HandleBars.registerHelper('isNotId', function (className) {
    return (className != 'id')
})
</function>
