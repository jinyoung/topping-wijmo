forEach: ValueObject
fileName: {{namePascalCase}}.vue
path: frontend-wijmo/src/components
---
<template>
    {{#referenceClass}}
    <div>
        <{{../referenceClass}}Picker v-if="editMode" searchApiPath="{{namePlural}}/search/{{#queryOption}}{{apiPath}}{{/queryOption}}/Query" :label="label" v-model="value" @selected="pick" :editMode="editMode" />
        <div v-else>
            <span>\{{ value && value.name ? value.name : '' }}</span>
        </div>
    </div>
    {{/referenceClass}}

    {{^referenceClass}}
    <div>
        <div class="detail-title">
        {{namePascalCase}}
        </div>
        <v-col>
        {{#fieldDescriptors}}
        {{#if (isNotId nameCamelCase)}}
        {{#if (isPrimitive className)}}
            <div class="label-title">{{#ifNotNull displayName namePascalCase}}{{/ifNotNull}}</div>
            <{{getPrimitiveType className}} label="입력하세요." v-model="value.{{nameCamelCase}}" :editMode="editMode"/>
        {{else}}
        {{#checkEntityMember className}}
            <{{className}} offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
        {{/checkEntityMember}}
        {{#checkListOfEntityMember className}}
            <{{getEntityClassNameOfList className}}List offline label="{{namePascalCase}}" v-model="value.{{nameCamelCase}}" :editMode="editMode" @change="change"/>
        {{/checkListOfEntityMember}}
        {{/if}}
        {{/if}}
        {{/fieldDescriptors}}
        </v-col>

        <v-card-actions v-if="inList">
            <slot name="actions"></slot>
        </v-card-actions>
    </div>
    {{/referenceClass}}
</template>

<script>
    export default {
        name: 'SalesItem',
        mixins:[BaseEntity],
        components:{
        },
        data: () => ({
            path: "salesOrders/salesItems",
            itemToEdit: {
                {{#fieldDescriptors}}
                {{nameCamelCase}}: null,
                {{/fieldDescriptors}}
            },
        }),
        created(){
        },
        computed:{
        },
        methods: {
        },
    }
</script>


<function>
    window.$HandleBars.registerHelper('ifNotNull', function (displayName, name) {
        if(displayName){
	        return displayName;
        }else{
	        return name;
        }
    })
    window.$HandleBars.registerHelper('print', function (value) {
        console.log(value)
    });

    window.$HandleBars.registerHelper('isNotId', function (className) {
        return (className != 'id')
    })

    window.$HandleBars.registerHelper('isPrimitive', function (className) {
        if(className.includes("String") || className.includes("Integer") || className.includes("Long") || className.includes("Double") || className.includes("Float")
                || className.includes("Boolean") || className.includes("Date")){
            return true;
        } else {
            return false;
        }
    })

    window.$HandleBars.registerHelper('getPrimitiveType', function (className, options) {
        if(className.includes("String")) {
            if(this.isLob) {
                return "LargeObject";
            } else {
                return "String";
            }
        } else if(className.includes("Integer") || className.includes("Long") || className.includes("Double") || className.includes("Float")) {
            if(this.isLob) {
                return "LargeObject";
            } else {
                return "Number";
            }
        } else if(className.includes("Boolean")) {
            return "Boolean";
        } else if(className.includes("Date")) {
            return "Date";
        }
    })

    window.$HandleBars.registerHelper('checkEntityMember', function (className, options) {
        if(!(className.endsWith("Address") || className.endsWith("Photo") || className.endsWith("User") || className.endsWith("Email") 
                || className.endsWith("Payment") || className.endsWith("Money") || className.endsWith("Weather") || className.endsWith("Rating")) && className.indexOf("java.") == -1 && className.indexOf("List") == -1){
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('checkListOfEntityMember', function (className, options) {
        if(className.indexOf("List") == 0) {
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    })

    window.$HandleBars.registerHelper('getEntityClassNameOfList', function (listClassName) {
        var regex = /\<(.*?)\>/g;
        var match = regex.exec(listClassName);
        if (match) {
            return (match[1]);
        }
        return "NO-CLASS";
    })

    window.$HandleBars.registerHelper('setDefaultValue', function (className) {
        var date = (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10);
        if(className.endsWith("String")) {
            return "''";
        } else if(className.endsWith("Integer") || className.endsWith("Long") || className.endsWith("Double") || className.endsWith("Float")) {
            return 0;
        } else if(className.endsWith("Boolean")) {
            return false;
        } else if(className.endsWith("Date")) {
            return "'" + date + "'";
        } else if(className.includes("List")) {
            return "[]"
        } else {
            return "{}"
        }
    })

</function>