forEach: Aggregate
fileName: {{namePascalCase}}Base.vue
path: frontend-wijmo/src/components
---
<template>
    <div></div>
</template>

<script>
    import {{namePascalCase}}Base from '../components/{{namePascalCase}}Base.vue'
    {{#aggregateRoot.fieldDescriptors}}
    {{#if referenceClass}}
    import {{referenceClass}}Base from '../components/{{referenceClass}}Base.vue'
    {{/if}}
    {{/aggregateRoot.fieldDescriptors}}
    const axios = require('axios').default;

    export default{
        name: '{{nameCamelCase}}-base',
        props: {
            offline: Boolean
        },
        computed: {},
        data: () => ({
            values: [],
            newValue: {},
            isUpdating: false,
        }),
        methods:{
            closeDialog(){
                this.openDialog = false
                location.reload()
            },
            append(value){
                this.tick = false
                this.newValue = {}
                this.values.push(value)
                this.$emit('input', this.values);
                this.$nextTick(function(){
                    this.tick=true
                })
            },
            remove(value){
                var where = -1;
                for(var i=0; i<this.values.length; i++){
                    if(this.values[i]._links.self.href == value._links.self.href){
                        where = i;
                        break;
                    }
                }
                if(where > -1){
                    this.values.splice(i, 1);
                    this.$emit('input', this.values);
                }
            },
            async getRealEntity(id){
               try{
                    let result = await axios.get(axios.fixUrl(`/{{namePlural}}/${id}`))
                    result.data.id = id;
                    return result.data;
                }catch(e){
                    return null;
                }
            },
            async processData(data){
                {{#aggregateRoot.fieldDescriptors}}
                {{#if referenceClass}}
                let {{referenceClass}}Class = this.$Vue.extend({{referenceClass}}Base);
                this.{{nameCamelCase}} = new {{referenceClass}}Class();
                {{/if}}
                {{/aggregateRoot.fieldDescriptors}}
                

                let Promises = data.map(async function (value) {
                    if(value == null) return
                    {{#aggregateRoot.fieldDescriptors}}
                    {{#if referenceClass}}
                    if (value.{{nameCamelCase}} && value.{{nameCamelCase}}.id){
                        value.{{nameCamelCase}} = await this.{{nameCamelCase}}.getRealEntity(value.{{nameCamelCase}}.id);
                    }
                    {{/if}}
                    {{/aggregateRoot.fieldDescriptors}}
                });
                await Promise.all(Promises);
                for(var i = 0; i < data.length ; i++ ) {
                    data[i].index = i;
                }
                return data;

            },
            async search(query) {
                var me = this;
                if(me.offline){
                    if(!me.values) me.values = [];
                    return;
                } 
                var temp = null;
                if(query!=null){
                    temp = await axios.put(axios.fixUrl('/{{namePlural}}/search/{{#contexts.views}}{{#queryOption}}{{apiPath}}{{/queryOption}}{{/contexts.views}}'), { {{#contexts.views}}{{#queryParameters}}{{nameCamelCase}}: query.parameters.{{nameCamelCase}}{{^@last}}, {{/@last}}{{/queryParameters}}{{/contexts.views}} });
                    me.values = await me.processData(temp.data);
                }else{
                    temp = await axios.get(axios.fixUrl('/{{namePlural}}'))
                    me.values = await me.processData(temp.data._embedded.{{namePlural}});
                }
                return me.values;
            },
        },

    }

</script>

<function>
    var me = this;
    me.contexts.views = [];
    if(this.boundedContext.readModels)
    this.boundedContext.readModels.forEach(view=>{
        if(view.aggregate == me && view.dataProjection=="query-for-aggregate"){
            me.contexts.views.push(view);
        }
    })
</function>