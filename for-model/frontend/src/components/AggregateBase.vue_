forEach: Aggregate
fileName: {{namePascalCase}}Base.vue
path: frontend/src/components
---
<template>
    <div></div>
</template>

<script>
    import from
    const axios = require('axios').default;

    export default{
        name: '{{nameCamelCase}}-base',
        props: {
            offline: Boolean
        },
        data: () => ({
            values: [],
            newValue: {},
            isUpdating: false,

        }),
        computed: {
            filteredLists() {
                if (this.isUpdating) {
                    return [];
                }
                return this.values;
            },
        },
        methods:{
            
            closeDialog(){
                this.openDialog = false
            },
            append(value){
                this.tick = false
                this.newValue = {}
                this.values.push(value)
                
                this.$emit('input', this.values);

                this.$nextTick(function(){
                    this.tick=true
                })
            },
            remove(value){
                var where = -1;
                for(var i=0; i<this.values.length; i++){
                    if(this.values[i]._links.self.href == value._links.self.href){
                        where = i;
                        break;
                    }
                }

                if(where > -1){
                    this.values.splice(i, 1);
                    this.$emit('input', this.values);
                }
            },
            
            async search(query) {
                var me = this;
                if(me.offline){
                    if(!me.values) me.values = [];
                    return;
                } 

                var temp = null;
                if(query!=null){
                    temp = await axios.get(axios.fixUrl('/{{toURL nameCamelCase}}/' + query.apiPath), {params: query.parameters})

                }else{
                    temp = await axios.get(axios.fixUrl('/{{toURL nameCamelCase}}'))

                }
                let {{toURL nameCamelCase}} = temp.data._embedded.{{toURL nameCamelCase}}
                this.isUpdating = true;
                me.values = {{toURL nameCamelCase}}
                await this.updateNames();
                this.isUpdating = false;
            },
        },

    }

</script>